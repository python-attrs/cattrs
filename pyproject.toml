[tool.black]
skip-magic-trailing-comma = true

[tool.pdm.dev-dependencies]
lint = [
    "black>=24.2.0",
    "ruff>=0.0.277",
]
test = [
    "hypothesis>=6.79.4",
    "pytest>=7.4.0",
    "immutables>=0.20",
    "typing-extensions>=4.7.1",
    "coverage>=7.4.0",
    "pytest-xdist>=3.4.0",
]
docs = [
    "sphinx>=5.3.0",
    "furo>=2024.1.29",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=1.0.0",
    "pendulum>=2.1.2",
    "sphinx-autobuild",
    "typing-extensions>=4.8.0",
]
bench = [
    "pyperf>=2.6.1",
    "pytest-benchmark>=4.0.0",
]
tests-mypy = [
    "pytest-mypy-plugins>=3.0.0",
    "mypy>=1.7.1",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true

[project]
name = "cattrs"
description = "Composable complex class support for attrs and dataclasses."
authors = [
    {name = "Tin Tvrtkovic", email = "tinchester@gmail.com"},
]
dependencies = [
    "attrs>=23.1.0",
    "typing-extensions>=4.1.0, !=4.6.3; python_version < '3.11'",
    "exceptiongroup>=1.1.1; python_version < '3.11'",
]
requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}
keywords = ["attrs", "serialization", "dataclasses"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Typing :: Typed",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://catt.rs"
Changelog = "https://catt.rs/en/latest/history.html"
"Bug Tracker" = "https://github.com/python-attrs/cattrs/issues"
Repository = "https://github.com/python-attrs/cattrs"
Documentation = "https://catt.rs/en/stable/"

[project.optional-dependencies]
ujson = [
    "ujson>=5.7.0",
]
orjson = [
    "orjson>=3.9.2; implementation_name == \"cpython\"",
]
msgpack = [
    "msgpack>=1.0.5",
]
pyyaml = [
    "PyYAML>=6.0",
]
tomlkit = [
    "tomlkit>=0.11.8",
]
cbor2 = [
    "cbor2>=5.4.6",
]
bson = [
    "pymongo>=4.4.0",
]
msgspec = [
    "msgspec>=0.18.5; implementation_name == \"cpython\"",
]

[tool.pytest.ini_options]
addopts = "-l"

[tool.coverage.run]
parallel = true
source_pkgs = ["cattrs", "tests"]

[tool.coverage.report]
exclude_also = [
    "@overload",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol(\\[.*\\])?\\):",
    "assert_never\\("
]

[tool.ruff]
src = ["src", "tests"]
select = [
    "E",   # pycodestyle
    "W",   # pycodestyle
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "T20", # flake8-print
    "ISC", # flake8-implicit-str-concat
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "DTZ", # flake8-datetimez
    "PGH", # pygrep-hooks
    "PLC", # Pylint
    "PIE", # flake8-pie
    "RUF", # ruff
    "I",   # isort
]
ignore = [
    "E501",   # line length is handled by black
    "RUF001", # leave my smart characters alone
    "S101",   # assert
    "S307",   # hands off my eval
    "SIM300", # Yoda rocks in asserts
    "PGH001", # No eval lol?
    "PGH003", # leave my type: ignores alone
    "B006",   # mutable argument defaults
    "DTZ001", # datetimes in tests
    "DTZ006", # datetimes in tests
]

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build.targets.wheel]
packages = ["src/cattr", "src/cattrs"]

[tool.check-wheel-contents]
toplevel = ["cattr", "cattrs"]

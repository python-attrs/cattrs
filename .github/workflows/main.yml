---
name: CI

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "pypy-3.10"]
      fail-fast: false

    steps:
      - uses: "actions/checkout@v4"

      - uses: "pdm-project/setup-pdm@v4"
        with:
          python-version: "${{ matrix.python-version }}"
          allow-python-prereleases: true
          cache: true

      - name: "Run Tox"
        run: |
          python -Im pip install --upgrade tox tox-gh-actions

          python -Im tox

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python-version }}
          path: .coverage.*
          if-no-files-found: ignore
          include-hidden-files: true

  coverage:
    name: "Combine & check coverage."
    needs: "tests"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v4"

      - uses: "actions/setup-python@v5"
        with:
          cache: "pip"
          python-version: "3.12"

      - run: "python -Im pip install --upgrade coverage[toml]"

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: "Combine coverage"
        run: |
          python -Im coverage combine
          python -Im coverage html
          python -Im coverage json

          # Report and write to summary.
          python -Im coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV

          # Report again and fail if under the threshold.
          python -Im coverage report --fail-under=99

      - name: "Upload HTML report."
        uses: "actions/upload-artifact@v4"
        with:
          name: "html-report"
          path: "htmlcov"
        if: always()

      - name: "Make badge"
        if: github.ref == 'refs/heads/main'
        uses: "schneegans/dynamic-badges-action@v1.4.0"
        with:
          # GIST_TOKEN is a GitHub personal access token with scope "gist".
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 22405310d6a663164d894a2beab4d44d
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}

  package:
    name: "Build & verify package"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v4"
      - uses: "pdm-project/setup-pdm@v4"
        with:
          python-version: "3.12"

      - name: "Install check-wheel-content and twine"
        run: "python -m pip install twine check-wheel-contents"
      - name: "Build package"
        run: "pdm build"
      - name: "List result"
        run: "ls -l dist"
      - name: "Check wheel contents"
        run: "check-wheel-contents --toplevel cattr,cattrs dist/*.whl"
      - name: "Check long_description"
        run: "python -m twine check dist/*"
